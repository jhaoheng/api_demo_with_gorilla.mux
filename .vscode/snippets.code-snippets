{
	"mux_unit_test": {
		"prefix": "mux_unit_test",
		"body": [
			"import (",
			"\t\"app/modules\"",
			"\t\"bytes\"",
			"\t\"encoding/json\"",
			"\t\"io\"",
			"\t\"net/http\"",
			"\t\"net/http/httptest\"",
			"\t\"testing\"",
			"",
			"\t\"github.com/sirupsen/logrus\"",
			"\t\"github.com/stretchr/testify/suite\"",
			")",
			"",
			"/*",
			"[USAGE]",
			"- export AWS_PROFILE=prod",
			"- update the word of `MyTestName`",
			"- run: `go test -run TestMyTestName` or `go test -v ./...`",
			"*/",
			"type SuiteMyTestNameTestPlan struct {",
			"\tAccount  string",
			"\tPassword string",
			"\tFullname string",
			"\tExpect   string",
			"}",
			"",
			"type SuiteMyTestName struct {",
			"\tsuite.Suite",
			"\tApiMethod string",
			"\tApiUrl    string",
			"\tTestPlan  SuiteMyTestNameTestPlan",
			"}",
			"",
			"func TestMyTestName(t *testing.T) {",
			"\tsuite.Run(t, new(SuiteMyTestName))",
			"}",
			"",
			"func (s *SuiteMyTestName) BeforeTest(suiteName, testName string) {",
			"\tlogrus.Info(\"BeforeTest, \", s.T().Name())",
			"}",
			"",
			"func (s *SuiteMyTestName) TestDo() {",
			"\treq, err := http.NewRequest(s.ApiMethod, s.ApiUrl, func() io.Reader {",
			"\t\tb, _ := json.Marshal()",
			"\t\treturn bytes.NewBuffer(b)",
			"\t}())",
			"\tif !s.NoError(err) {",
			"\t\ts.T().Fatal(err)",
			"\t}",
			"\t// context.Set(req, \"account\", test_plan.AccessAccount)",
			"\trr := httptest.NewRecorder()",
			"",
			"\t//",
			"\thttp.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
			"\t\tapi := MyTestName{}",
			"\t\tpayload, status, err := api.do(w, r)",
			"\t\tmodules.NewResp(w, r).Set(modules.RespContect{",
			"\t\t\tData:   payload,",
			"\t\t\tStutus: status,",
			"\t\t\tError:  err,",
			"\t\t})",
			"\t}).ServeHTTP(rr, req)",
			"",
			"\t//",
			"\t// fmt.Println(\"http status_code=>\", rr.Code)",
			"\t// fmt.Println(\"header=>\", rr.Header())",
			"\t// fmt.Println(\"body=>\", rr.Body.String())",
			"\tif rr.Code != http.StatusOK {",
			"\t\ts.T().Fatalf(\"handler returned wrong status code: got %v want %v\", rr.Code, http.StatusOK)",
			"\t}",
			"\tif rr.Body.String() != s.TestPlan.Expect {",
			"\t\ts.T().Fatalf(\"handler returned unexpected body: \\n- got %v \\n- want %v\", rr.Body.String(), test_plan.Expect)",
			"\t}",
			"}",
			"",
			"func (s *SuiteMyTestName) AfterTest(suiteName, testName string) {",
			"\tlogrus.Info(\"AfterTest, \", s.T().Name())",
			"}"
		],
		"description": "description for mux_unit_test"
	}
}