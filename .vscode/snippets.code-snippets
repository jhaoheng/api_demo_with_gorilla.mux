{
	"mux_unit_test": {
		"prefix": "mux_unit_test",
		"body": [
			"import (",
			"    \"api_demo_with_gorilla.mux/app/models\"",
			"    \"bytes\"",
			"    \"encoding/json\"",
			"    \"io\"",
			"    \"net/http\"",
			"    \"net/http/httptest\"",
			"    \"testing\"",
			"    \"time\"",
			"",
			"    \"github.com/gorilla/mux\"",
			"    \"github.com/sirupsen/logrus\"",
			"    \"github.com/stretchr/testify/suite\"",
			")",
			"",
			"/*",
			"[USAGE]",
			"- 若有使用 AWS, 則 export AWS_PROFILE=prod",
			"- 更新 `MyTestName` 為 handler 名稱",
			"- 確定測試資料",
			"- 確定 api => method, path, body",
			"- 更新要替換的 mock",
			"- run: `go test -run TestMyTestName` or `go test -v ./...`",
			"*/",
			"type SuiteMyTestNameTestPlan struct {",
			"    ApiMethod  string",
			"    ApiUrl     string",
			"    ApiBody    *MyTestNameBody",
			"    ExpectCode int",
			"    ExpectBody string",
			"}",
			"",
			"type SuiteMyTestName struct {",
			"    suite.Suite",
			"    TestPlans []SuiteMyTestNameTestPlan",
			"}",
			"",
			"func TestMyTestName(t *testing.T) {",
			"    suite.Run(t, new(SuiteMyTestName))",
			"}",
			"",
			"func (s *SuiteMyTestName) BeforeTest(suiteName, testName string) {",
			"    logrus.Info(\"BeforeTest, \", s.T().Name())",
			"    modules.InitValidate()",
			"    //",
			"    test_plans := []SuiteMyTestNameTestPlan{",
			"        0: {",
			"            ApiMethod: \"\",",
			"            ApiUrl:    \"\",",
			"            ApiBody:   &MyTestNameBody{},",
			"        },",
			"    }",
			"    s.TestPlans = test_plans",
			"}",
			"",
			"func (s *SuiteMyTestName) TestDo() {",
			"    for index, test_plan := range s.TestPlans {",
			"        req, err := http.NewRequest(test_plan.ApiMethod, test_plan.ApiUrl, func() io.Reader {",
			"            b, _ := json.Marshal(test_plan.ApiBody)",
			"            return bytes.NewBuffer(b)",
			"        }())",
			"        if !s.NoError(err) {",
			"            s.T().Fatal(err)",
			"        }",
			"\t\t// type AccountType interface{}",
			"\t\t// var account_key AccountType = \"account\"",
			"\t\t// var account_value AccountType = test_plan.AccessAccount",
			"\t\t// ctx := context.WithValue(req.Context(), account_key, account_value)",
			"\t\t// req = req.WithContext(ctx)",
			"\t\t//",
			"        rr := httptest.NewRecorder()",
			"\t\t//",
			"        router := mux.NewRouter()",
			"        router.HandleFunc(更新_path, NewMyTestName(func() *MyTestName {",
			"            mock_api := MyTestName{",
			"                model_get_user: s.mock_get_user(index, test_plan.Account, test_plan.Fullname),",
			"            }",
			"            return &mock_api",
			"        }()))",
			"        router.ServeHTTP(rr, req)",
			"",
			"        //",
			"        // fmt.Println(\"http status_code=>\", rr.Code)",
			"        // fmt.Println(\"header=>\", rr.Header())",
			"        // fmt.Println(\"body=>\", rr.Body.String())",
			"        if rr.Code != test_plan.ExpectCode {",
			"            s.T().Fatalf(\"handler returned wrong status code: got %v want %v\", rr.Code, test_plan.ExpectCode)",
			"        }",
			"        if rr.Body.String() != test_plan.ExpectBody {",
			"            s.T().Fatalf(\"handler returned unexpected body: \\n- got %v \\n- want %v\", rr.Body.String(), test_plan.ExpectBody)",
			"        }",
			"    }",
			"}",
			"",
			"func (s *SuiteMyTestName) AfterTest(suiteName, testName string) {",
			"    logrus.Info(\"AfterTest, \", s.T().Name())",
			"}",
			"",
			"//",
			"func (s *SuiteMyTestName) mock_get_user(index int, acct, fullname string) *models.MockUser {",
			"    time_at, _ := time.Parse(\"2006-01-02 15:04:05\", \"2022-01-01 12:00:00\")",
			"",
			"    mock_get_user := models.NewMockUser()",
			"    mock_get_user.On(\"SetAcct\", acct)",
			"    mock_get_user.On(\"Get\").Return(models.User{",
			"        Acct:      acct,",
			"        Fullname:  fullname,",
			"        CreatedAt: time_at,",
			"        UpdatedAt: time_at,",
			"    }, nil)",
			"    return mock_get_user",
			"}"
		],
		"description": "description for mux_unit_test"
	}
}