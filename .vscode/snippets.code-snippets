{
	"mux_unit_test": {
		"prefix": "mux_unit_test",
		"body": [
			"/*",
			"[USAGE]",
			"- export AWS_PROFILE=prod",
			"- update the word of `MyTestName`",
			"- run: `go test -run TestMyTestName` or `go test -v ./...`",
			"*/",
			"type SuiteMyTestNameTestPlan struct {",
			"\tAccount    string",
			"\tPassword   string",
			"\tFullname   string",
			"\tExpectCode int",
			"\tExpectBody string",
			"}",
			"",
			"type SuiteMyTestName struct {",
			"\tsuite.Suite",
			"\tApiMethod string",
			"\tApiUrl    string",
			"\tApiBody   io.Reader",
			"\tTestPlans []SuiteMyTestNameTestPlan",
			"}",
			"",
			"func TestMyTestName(t *testing.T) {",
			"\tsuite.Run(t, new(SuiteMyTestName))",
			"}",
			"",
			"func (s *SuiteMyTestName) BeforeTest(suiteName, testName string) {",
			"\tlogrus.Info(\"BeforeTest, \", s.T().Name())",
			"\t//",
			"",
			"\t//",
			"\ts.ApiMethod = \"\"",
			"\ts.ApiUrl = \"/\"",
			"\ts.ApiBody = func() io.Reader {",
			"\t\tb, _ := json.Marshal()",
			"\t\treturn bytes.NewBuffer(b)",
			"\t}()",
			"}",
			"",
			"func (s *SuiteMyTestName) TestDo() {",
			"\tfor _, test_plan := range s.TestPlans {",
			"\t\treq, err := http.NewRequest(s.ApiMethod, s.ApiUrl, s.ApiBody)",
			"\t\tif !s.NoError(err) {",
			"\t\t\ts.T().Fatal(err)",
			"\t\t}",
			"\t\t// context.Set(req, \"account\", test_plan.AccessAccount)",
			"\t\trr := httptest.NewRecorder()",
			"\t\thttp.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
			"\t\t\tapi := MyTestName{}",
			"\t\t\tpayload, status, err := api.do(w, r)",
			"\t\t\tmodules.NewResp(w, r).Set(modules.RespContect{",
			"\t\t\t\tData:   payload,",
			"\t\t\t\tStutus: status,",
			"\t\t\t\tError:  err,",
			"\t\t\t})",
			"\t\t}).ServeHTTP(rr, req)",
			"",
			"\t\t//",
			"\t\t// fmt.Println(\"http status_code=>\", rr.Code)",
			"\t\t// fmt.Println(\"header=>\", rr.Header())",
			"\t\t// fmt.Println(\"body=>\", rr.Body.String())",
			"\t\tif rr.Code != test_plan.ExpectCode {",
			"\t\t\ts.T().Fatalf(\"handler returned wrong status code: got %v want %v\", rr.Code, test_plan.ExpectCode)",
			"\t\t}",
			"\t\tif rr.Body.String() != test_plan.ExpectBody {",
			"\t\t\ts.T().Fatalf(\"handler returned unexpected body: \\n- got %v \\n- want %v\", rr.Body.String(), test_plan.ExpectBody)",
			"\t\t}",
			"\t}",
			"}",
			"",
			"func (s *SuiteMyTestName) AfterTest(suiteName, testName string) {",
			"\tlogrus.Info(\"AfterTest, \", s.T().Name())",
			"}",
			"",
			"//",
			"func (s *SuiteMyTestName) mock_get_user(acct string) *models.MockUser {",
			"\ttime_at, _ := time.Parse(\"2006-01-02 15:04:05\", \"2022-01-01 12:00:00\")",
			"",
			"\tmock_get_user := models.NewMockUser()",
			"\tmock_get_user.On(\"SetAcct\", acct)",
			"\tmock_get_user.On(\"Get\").Return(models.User{",
			"\t\tAcct:      acct,",
			"\t\tFullname:  \"\",",
			"\t\tCreatedAt: time_at,",
			"\t\tUpdatedAt: time_at,",
			"\t}, nil)",
			"\treturn mock_get_user",
			"}"
		],
		"description": "description for mux_unit_test"
	}
}