{
	"mux_unit_test": {
		"prefix": "mux_unit_test",
		"body": [
			"import (",
			"\t\"api_demo_with_gorilla.mux/app/models\"",
			"\t\"bytes\"",
			"\t\"encoding/json\"",
			"\t\"io\"",
			"\t\"net/http\"",
			"\t\"net/http/httptest\"",
			"\t\"testing\"",
			"\t\"time\"",
			"",
			"\t\"github.com/gorilla/mux\"",
			"\t\"github.com/sirupsen/logrus\"",
			"\t\"github.com/stretchr/testify/suite\"",
			")",
			"",
			"/*",
			"[USAGE]",
			"- 若有使用 AWS, 則 export AWS_PROFILE=prod",
			"- 更新 `MyTestName` 為 handler 名稱",
			"- 確定測試資料",
			"- 確定 api => method, path, body",
			"- 更新要替換的 mock",
			"- run: `go test -run TestMyTestName` or `go test -v ./...`",
			"*/",
			"type SuiteMyTestNameTestPlan struct {",
			"\tApiMethod  string",
			"\tApiUrl     string",
			"\tApiBody    *MyTestNameBody",
			"\tExpectCode int",
			"\tExpectBody string",
			"}",
			"",
			"type SuiteMyTestName struct {",
			"\tsuite.Suite",
			"\tApiMethod string",
			"\tApiUrl    string",
			"\tApiBody   io.Reader",
			"\tTestPlans []SuiteMyTestNameTestPlan",
			"}",
			"",
			"func TestMyTestName(t *testing.T) {",
			"\tsuite.Run(t, new(SuiteMyTestName))",
			"}",
			"",
			"func (s *SuiteMyTestName) BeforeTest(suiteName, testName string) {",
			"\tlogrus.Info(\"BeforeTest, \", s.T().Name())",
            "\tmodules.InitValidate()",
			"\t//",
			"\ttest_plans := []SuiteMyTestNameTestPlan{",
			"\t\t0: {",
			"\t\t\tApiMethod: \"\",",
			"\t\t\tApiUrl:    \"\",",
			"\t\t\tApiBody:   &MyTestNameBody{},",
			"\t\t},",
			"\t}",
			"\ts.TestPlans = test_plans",
			"}",
			"",
			"func (s *SuiteMyTestName) TestDo() {",
			"\tfor index, test_plan := range s.TestPlans {",
			"\t\treq, err := http.NewRequest(test_plan.ApiMethod, test_plan.ApiUrl, func() io.Reader {",
			"\t\t\tb, _ := json.Marshal(test_plan.ApiBody)",
			"\t\t\treturn bytes.NewBuffer(b)",
			"\t\t}())",
			"\t\tif !s.NoError(err) {",
			"\t\t\ts.T().Fatal(err)",
			"\t\t}",
			"\t\trr := httptest.NewRecorder()",
			"",
			"\t\trouter := mux.NewRouter()",
			"\t\trouter.HandleFunc(更新_path, NewMyTestName(func() *MyTestName {",
			"\t\t\tmock_api := MyTestName{",
			"\t\t\t\tmodel_get_user: s.mock_get_user(index, test_plan.Account, test_plan.Fullname),",
			"\t\t\t}",
			"\t\t\treturn &mock_api",
			"\t\t}()))",
			"\t\trouter.ServeHTTP(rr, req)",
			"",
			"\t\t//",
			"\t\t// fmt.Println(\"http status_code=>\", rr.Code)",
			"\t\t// fmt.Println(\"header=>\", rr.Header())",
			"\t\t// fmt.Println(\"body=>\", rr.Body.String())",
			"\t\tif rr.Code != test_plan.ExpectCode {",
			"\t\t\ts.T().Fatalf(\"handler returned wrong status code: got %v want %v\", rr.Code, test_plan.ExpectCode)",
			"\t\t}",
			"\t\tif rr.Body.String() != test_plan.ExpectBody {",
			"\t\t\ts.T().Fatalf(\"handler returned unexpected body: \\n- got %v \\n- want %v\", rr.Body.String(), test_plan.ExpectBody)",
			"\t\t}",
			"\t}",
			"}",
			"",
			"func (s *SuiteMyTestName) AfterTest(suiteName, testName string) {",
			"\tlogrus.Info(\"AfterTest, \", s.T().Name())",
			"}",
			"",
			"//",
			"func (s *SuiteMyTestName) mock_get_user(index int, acct, fullname string) *models.MockUser {",
			"\ttime_at, _ := time.Parse(\"2006-01-02 15:04:05\", \"2022-01-01 12:00:00\")",
			"",
			"\tmock_get_user := models.NewMockUser()",
			"\tmock_get_user.On(\"SetAcct\", acct)",
			"\tmock_get_user.On(\"Get\").Return(models.User{",
			"\t\tAcct:      acct,",
			"\t\tFullname:  fullname,",
			"\t\tCreatedAt: time_at,",
			"\t\tUpdatedAt: time_at,",
			"\t}, nil)",
			"\treturn mock_get_user",
			"}"
		],
		"description": "description for mux_unit_test"
	}
}